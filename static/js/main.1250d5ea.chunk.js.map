{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","AppStateContext.tsx","Card.tsx","utils/isHidden.ts","Column.tsx","useItemDrag.ts","App.tsx","index.tsx"],"names":["AppContainer","styled","div","DragPreviewContainer","props","isHidden","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","moveItem","array","from","to","item","index","slice","insertItemAtIndex","removeItemAtIndex","appData","draggedItem","undefined","lists","id","tasks","appStateReducer","state","action","type","nanoid","payload","targetListIndex","items","listId","findIndex","targetList","updatedTargetList","newItem","targetIndex","map","dragIndex","hoverIndex","AppStateContext","createContext","AppStateProvider","children","useReducer","dispatch","Provider","useAppState","useContext","Card","itemType","Boolean","Column","drag","useDrag","begin","end","useItemDrag","useDrop","accept","hover","drop","task","i","App","list","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.1250d5ea.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`\ninterface DragPreviewContainerProps {\n    isHidden?: boolean\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n    opacity: ${props => (props.isHidden ? 0.3 : 1)};\n`\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`\n\nexport const ColumnTitle = styled.div`\n    padding: 6px 16px 12px;\n    font-weight: bold;\n`\n\nexport const CardContainer = styled.div`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`\ninterface AddItemButtonProps {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n        background-color: #ffffff52;\n    }\n`\n\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`\n\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`\n\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px; \n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`","import React, { useState } from \"react\"\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"./styles\"\nimport { useFocus } from \"./utils/useFocus\"\n\ninterface NewItemFormProps {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n    const [text, setText] = useState(\"\")\n    const inputRef = useFocus()\n    const handleAddText = (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (event.key === \"Enter\") {\n            onAdd(text)\n        }\n    }\n\n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                ref={inputRef}\n                value={text}\n                onChange={e => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    )\n}","import { useRef, useEffect } from \"react\"\n\nexport const useFocus = () => {\n    const ref = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        ref.current?.focus()\n    }, [])\n\n    return ref\n}","import React, { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ninterface AddNewItemProps {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n    const [showForm, setShowForm] = useState(false)\n    const { onAdd, toggleButtonText, dark } = props\n\n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text)\n                    setShowForm(false)\n                }}\n            />\n        )\n    }\n\n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    )\n}","interface Item {\n    id: string\n}\n\nexport const findItemIndexById = <T extends Item>(items: T[], id: string) => {\n    return items.findIndex((item: T) => item.id === id)\n}\n\nexport function overrideItemAtIndex<T>(\n    array: T[],\n    newItem: T,\n    targetIndex: number\n) {\n    return array.map((item, index) => {\n        if (index !== targetIndex) {\n            return item\n        }\n\n        return newItem\n    })\n}\n\nexport const moveItem = <T>(array: T[], from: number, to: number) => {\n    const item = array[from]\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to)\n}\n\nexport function removeItemAtIndex<T>(array: T[], index: number) {\n    return [...array.slice(0, index), ...array.slice(index + 1)]\n}\n\nexport function insertItemAtIndex<T>(\n    array: T[],\n    item: T,\n    index: number\n) {\n    return [...array.slice(0, index), item, ...array.slice(index)]\n}","import { nanoid } from \"nanoid\"\nimport React, { createContext, useContext, useReducer } from \"react\"\nimport { DragItem } from \"./DragItem\"\nimport { findItemIndexById, overrideItemAtIndex, moveItem } from \"./utils/arrayUtils\"\n\ninterface Task {\n    id: string\n    text: string\n}\n\ninterface List {\n    id: string\n    text: string\n    tasks: Task[]\n}\n\nexport interface AppState {\n    lists: List[]\n    draggedItem: DragItem | undefined\n}\n\nconst appData: AppState = {\n    draggedItem: undefined,\n    lists: [\n        {\n            id: \"0\",\n            text: \"To Do\",\n            tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n        },\n        {\n            id: \"1\",\n            text: \"In Progress\",\n            tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n        },\n        {\n            id: \"2\",\n            text: \"Done\",\n            tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n        }\n    ]\n}\n\ninterface AppStateContextProps {\n    state: AppState\n    dispatch: React.Dispatch<Action>\n}\n\ntype Action =\n    | {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n    | {\n        type: \"ADD_TASK\"\n        payload: { text: string, listId: string }\n    }\n    | {\n        type: \"MOVE_LIST\"\n        payload: {\n            dragIndex: number\n            hoverIndex: number\n        }\n    }\n    | {\n        type: \"SET_DRAGGED_ITEM\"\n        payload: DragItem | undefined\n    }\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n    switch (action.type) {\n        case \"ADD_LIST\": {\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    { id: nanoid(), text: action.payload, tasks: [] }\n                ]\n            }\n        }\n        case \"ADD_TASK\": {\n            const targetListIndex = findItemIndexById(\n                state.lists,\n                action.payload.listId\n            )\n\n            const targetList = state.lists[targetListIndex]\n\n            const updatedTargetList = {\n                ...targetList,\n                tasks: [\n                    ...targetList.tasks,\n                    { id: nanoid(), text: action.payload.text }\n                ]\n            }\n            return {\n                ...state,\n                lists: overrideItemAtIndex(\n                    state.lists,\n                    updatedTargetList,\n                    targetListIndex\n                )\n            }\n        }\n        case \"MOVE_LIST\": {\n            const { dragIndex, hoverIndex } = action.payload\n            return {\n                ...state,\n                lists: moveItem(state.lists, dragIndex, hoverIndex)\n            }\n        }\n        case \"SET_DRAGGED_ITEM\": {\n            return { ...state, draggedItem: action.payload }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n    const [state, dispatch] = useReducer(appStateReducer, appData)\n\n    return (\n        <AppStateContext.Provider value={{ state, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    )\n}\n\nexport const useAppState = () => {\n    return useContext(AppStateContext)\n}","import React from \"react\"\nimport { CardContainer } from \"./styles\"\n\ninterface CardProps {\n    text: string\n}\n\nexport const Card = ({ text }: CardProps) => {\n    return <CardContainer>{text}</CardContainer>\n}","import {DragItem} from \"../DragItem\"\n\nexport const isHidden = (\n    draggedItem: DragItem | undefined,\n    itemType: string,\n    id: string\n): boolean => {\n    return Boolean(\n        draggedItem && draggedItem.type === itemType && draggedItem.id === id\n    )\n}","import React, { useRef } from \"react\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./AppStateContext\"\nimport { Card } from \"./Card\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { useItemDrag } from \"./useItemDrag\"\nimport { useDrop } from \"react-dnd\"\nimport { DragItem } from \"./DragItem\"\nimport { isHidden } from \"./utils/isHidden\"\n\ninterface ColumnProps {\n    text: string\n    index: number\n    id: string\n}\n\nexport const Column = ({ text, index, id }: ColumnProps) => {\n    const { state, dispatch } = useAppState()\n    const ref = useRef<HTMLDivElement>(null)\n\n    const { drag } = useItemDrag({ type: \"COLUMN\", id, index, text })\n\n    const [, drop] = useDrop({\n        accept: \"COLUMN\",\n        hover(item: DragItem) {\n            const dragIndex = item.index\n            const hoverIndex = index\n\n            if (dragIndex === hoverIndex) {\n                return\n            }\n\n            dispatch({ type: \"MOVE_LIST\", payload: { dragIndex, hoverIndex } })\n\n            item.index = hoverIndex\n        }\n    })\n\n    drag(drop(ref))\n\n    return (\n        <ColumnContainer ref={ref} isHidden={isHidden(state.draggedItem, \"COLUMN\", id)}>\n            <ColumnTitle>{text}</ColumnTitle>\n            {state.lists[index].tasks.map((task, i) => (\n                <Card text={task.text} key={task.id} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another task\"\n                onAdd={text => dispatch({ type: \"ADD_TASK\", payload: { text, listId: id } })}\n                dark\n            />\n        </ColumnContainer>\n    )\n}","import { useDrag } from \"react-dnd\"\nimport { useAppState } from \"./AppStateContext\"\nimport { DragItem } from \"./DragItem\"\n\nexport const useItemDrag = (item: DragItem) => {\n    const { dispatch } = useAppState()\n    const [, drag] = useDrag({\n        item,\n        begin: () =>\n            dispatch({\n                type: \"SET_DRAGGED_ITEM\",\n                payload: item\n            }),\n        end: () => dispatch({ type: \"SET_DRAGGED_ITEM\", payload: undefined })\n    })\n    return { drag }\n}","import React from 'react'\nimport { AddNewItem } from './AddNewItem'\nimport { useAppState } from './AppStateContext'\nimport { Column } from './Column'\nimport { AppContainer } from './styles'\n\nconst App = () => {\n    const { state, dispatch } = useAppState()\n\n    return (\n        <AppContainer>\n            {state.lists.map((list, i) => (\n                <Column id={list.id} text={list.text} key={list.id} index={i} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={text => dispatch({ type: \"ADD_LIST\", payload: text })}\n            />\n        </AppContainer>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { AppStateProvider } from \"./AppStateContext\"\nimport { DndProvider } from \"react-dnd\"\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\"\n\nReactDOM.render(\n    <DndProvider backend={Backend}>\n        <AppStateProvider>\n            <App />\n        </AppStateProvider>\n    </DndProvider>,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}