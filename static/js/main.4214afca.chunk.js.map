{"version":3,"sources":["styles.ts","NewItemForm.tsx","AddNewItem.tsx","Card.tsx","Column.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContainer","styled","div","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","props","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","NewItemForm","onAdd","useState","text","setText","value","onChange","e","target","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","Card","Column","children","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ykEAEO,IAAMA,EAAeC,IAAOC,IAAV,KAUZC,EAAkBF,IAAOC,IAAV,KAUfE,EAAcH,IAAOC,IAAV,KAKXG,EAAgBJ,IAAOC,IAAV,KAabI,EAAgBL,IAAOM,OAAV,KAIb,SAAAC,GAAK,OAAKA,EAAMC,KAAO,OAAS,UAYhCC,EAAuBT,IAAOC,IAAV,KAQpBS,EAAgBV,IAAOM,OAAV,KAUbK,EAAeX,IAAOY,MAAV,KCnEZC,EAAc,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAA8B,EAChCC,mBAAS,IADuB,mBACjDC,EADiD,KAC3CC,EAD2C,KAGxD,OACI,eAACR,EAAD,WACI,cAACE,EAAD,CACIO,MAAOF,EACPG,SAAU,SAAAC,GAAC,OAAIH,EAAQG,EAAEC,OAAOH,UAEpC,cAACR,EAAD,CAAeY,QAAS,kBAAMR,EAAME,IAApC,wBCNCO,EAAa,SAAChB,GAA4B,IAAD,EAClBQ,oBAAS,GADS,mBAC3CS,EAD2C,KACjCC,EADiC,KAE1CX,EAAkCP,EAAlCO,MAAOY,EAA2BnB,EAA3BmB,iBAAkBlB,EAASD,EAATC,KAEjC,OAAIgB,EAEI,cAAC,EAAD,CACIV,MAAK,+GAAE,SAAAE,GACHF,EAAME,GACNS,GAAY,QAOxB,cAACpB,EAAD,CAAeG,KAAMA,EAAMc,QAAS,kBAAMG,GAAY,IAAtD,SACKC,KCpBAC,EAAO,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,KACnB,OAAO,cAACZ,EAAD,UAAgBY,KCAdY,EAAS,SAAC,GAGsB,IAFzCZ,EAEwC,EAFxCA,KACAa,EACwC,EADxCA,SAEA,OACI,eAAC3B,EAAD,WACI,cAACC,EAAD,UAAca,IACba,EACD,cAAC,EAAD,CACIH,iBAAiB,qBACjBZ,MAAOgB,QAAQC,IACfvB,MAAI,QCILwB,EAjBH,WACV,OACE,eAACjC,EAAD,WACE,cAAC,EAAD,CAAQiB,KAAK,QAAb,SACE,cAAC,EAAD,CAAMA,KAAK,4BAEb,cAAC,EAAD,CAAQA,KAAK,cAAb,SACE,cAAC,EAAD,CAAMA,KAAK,uBAEb,cAAC,EAAD,CAAQA,KAAK,OAAb,SACE,cAAC,EAAD,CAAMA,KAAK,iCAEb,cAAC,EAAD,CAAYU,iBAAiB,qBAAqBZ,MAAOgB,QAAQC,UCJxDE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4214afca.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`\n\nexport const ColumnContainer = styled.div`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`\n\nexport const ColumnTitle = styled.div`\n    padding: 6px 16px 12px;\n    font-weight: bold;\n`\n\nexport const CardContainer = styled.div`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`\ninterface AddItemButtonProps {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n        background-color: #ffffff52;\n    }\n`\n\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`\n\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`\n\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px; \n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`\n","import React, { useState } from \"react\"\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"./styles\"\n\ninterface NewItemFormProps {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n    const [text, setText] = useState(\"\")\n\n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                value={text}\n                onChange={e => setText(e.target.value)}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    )\n}","import React, { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ninterface AddNewItemProps {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n    const [showForm, setShowForm] = useState(false)\n    const { onAdd, toggleButtonText, dark } = props\n\n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text)\n                    setShowForm(false)\n                }}\n            />\n        )\n    }\n\n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    )\n}","import React from \"react\"\nimport { CardContainer } from \"./styles\"\n\ninterface CardProps {\n    text: string\n}\n\nexport const Card = ({ text }: CardProps) => {\n    return <CardContainer>{text}</CardContainer>\n}","import React from \"react\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\n\ninterface ColumnProps {\n    text: string\n}\n\nexport const Column = ({\n    text,\n    children\n}: React.PropsWithChildren<ColumnProps>) => {\n    return (\n        <ColumnContainer>\n            <ColumnTitle>{text}</ColumnTitle>\n            {children}\n            <AddNewItem\n                toggleButtonText=\"+ Add another task\"\n                onAdd={console.log}\n                dark\n            />\n        </ColumnContainer>\n    )\n}","import React from 'react'\nimport { AddNewItem } from './AddNewItem'\nimport { Card } from './Card'\nimport { Column } from './Column'\nimport { AppContainer } from './styles'\n\nconst App = () => {\n  return (\n    <AppContainer>\n      <Column text=\"To Do\">\n        <Card text=\"Generate app scaffold\" />\n      </Column>\n      <Column text=\"In Progress\">\n        <Card text=\"Learn Typescript\" />\n      </Column>\n      <Column text=\"Done\">\n        <Card text=\"Begin to use static typing\" />\n      </Column>\n      <AddNewItem toggleButtonText=\"+ Add another list\" onAdd={console.log}/>\n    </AppContainer>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}