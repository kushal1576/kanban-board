{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","AppStateContext.tsx","utils/arrayUtils.ts","Card.tsx","Column.tsx","App.tsx","index.tsx"],"names":["AppContainer","styled","div","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","props","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","appData","lists","id","tasks","appStateReducer","state","action","type","nanoid","payload","targetListIndex","items","listId","findIndex","item","targetList","updatedTargetList","array","newItem","targetIndex","map","index","AppStateContext","createContext","AppStateProvider","children","useReducer","dispatch","Provider","useAppState","useContext","Card","Column","task","i","App","list","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77241992.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`\n\nexport const ColumnContainer = styled.div`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`\n\nexport const ColumnTitle = styled.div`\n    padding: 6px 16px 12px;\n    font-weight: bold;\n`\n\nexport const CardContainer = styled.div`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`\ninterface AddItemButtonProps {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n        background-color: #ffffff52;\n    }\n`\n\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`\n\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`\n\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px; \n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`\n","import React, { useState } from \"react\"\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"./styles\"\nimport { useFocus } from \"./utils/useFocus\"\n\ninterface NewItemFormProps {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n    const [text, setText] = useState(\"\")\n    const inputRef = useFocus()\n    const handleAddText = (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (event.key === \"Enter\") {\n            onAdd(text)\n        }\n    }\n\n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                ref={inputRef}\n                value={text}\n                onChange={e => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    )\n}","import { useRef, useEffect } from \"react\"\n\nexport const useFocus = () => {\n    const ref = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        ref.current?.focus()\n    }, [])\n\n    return ref\n}","import React, { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ninterface AddNewItemProps {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n    const [showForm, setShowForm] = useState(false)\n    const { onAdd, toggleButtonText, dark } = props\n\n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text)\n                    setShowForm(false)\n                }}\n            />\n        )\n    }\n\n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    )\n}","import { nanoid } from \"nanoid\"\nimport React, { createContext, useContext, useReducer } from \"react\"\nimport { findItemIndexById, overrideItemAtIndex } from \"./utils/arrayUtils\"\n\ninterface Task {\n    id: string\n    text: string\n}\n\ninterface List {\n    id: string\n    text: string\n    tasks: Task[]\n}\n\nexport interface AppState {\n    lists: List[]\n}\n\nconst appData: AppState = {\n    lists: [\n        {\n            id: \"0\",\n            text: \"To Do\",\n            tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n        },\n        {\n            id: \"1\",\n            text: \"In Progress\",\n            tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n        },\n        {\n            id: \"2\",\n            text: \"Done\",\n            tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n        }\n    ]\n}\n\ninterface AppStateContextProps {\n    state: AppState\n    dispatch: React.Dispatch<Action>\n}\n\ntype Action =\n    | {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n    | {\n        type: \"ADD_TASK\"\n        payload: { text: string, listId: string }\n    }\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n    switch (action.type) {\n        case \"ADD_LIST\": {\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    { id: nanoid(), text: action.payload, tasks: [] }\n                ]\n            }\n        }\n        case \"ADD_TASK\": {\n            const targetListIndex = findItemIndexById(\n                state.lists,\n                action.payload.listId\n            )\n\n            const targetList = state.lists[targetListIndex]\n\n            const updatedTargetList = {\n                ...targetList,\n                tasks: [\n                    ...targetList.tasks,\n                    { id: nanoid(), text: action.payload.text }\n                ]\n            }\n            return {\n                ...state,\n                lists: overrideItemAtIndex(\n                    state.lists,\n                    updatedTargetList,\n                    targetListIndex\n                )\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n    const [state, dispatch] = useReducer(appStateReducer, appData)\n\n    return (\n        <AppStateContext.Provider value={{ state, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    )\n}\n\nexport const useAppState = () => {\n    return useContext(AppStateContext)\n}","interface Item {\n    id: string\n}\n\nexport const findItemIndexById = <T extends Item>(items: T[], id: string) => {\n    return items.findIndex((item: T) => item.id === id)\n}\n\nexport function overrideItemAtIndex<T>(\n    array: T[],\n    newItem: T,\n    targetIndex: number\n) {\n    return array.map((item, index) => {\n        if (index !== targetIndex) {\n            return item\n        }\n\n        return newItem\n    })\n}","import React from \"react\"\nimport { CardContainer } from \"./styles\"\n\ninterface CardProps {\n    text: string\n}\n\nexport const Card = ({ text }: CardProps) => {\n    return <CardContainer>{text}</CardContainer>\n}","import React from \"react\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./AppStateContext\"\nimport { Card } from \"./Card\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\n\ninterface ColumnProps {\n    text: string\n    index: number\n    id: string\n}\n\nexport const Column = ({ text, index, id }: ColumnProps) => {\n    const { state, dispatch } = useAppState()\n\n    return (\n        <ColumnContainer>\n            <ColumnTitle>{text}</ColumnTitle>\n            {state.lists[index].tasks.map((task, i) => (\n                <Card text={task.text} key={task.id}/>\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another task\"\n                onAdd={text => dispatch({ type: \"ADD_TASK\", payload: { text, listId: id }})}\n                dark\n            />\n        </ColumnContainer>\n    )\n}","import React from 'react'\nimport { AddNewItem } from './AddNewItem'\nimport { useAppState } from './AppStateContext'\nimport { Column } from './Column'\nimport { AppContainer } from './styles'\n\nconst App = () => {\n    const { state, dispatch } = useAppState()\n\n    return (\n        <AppContainer>\n            {state.lists.map((list, i) => (\n                <Column id={list.id} text={list.text} key={list.id} index={i} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={text => dispatch({ type: \"ADD_LIST\", payload: text })}\n            />\n        </AppContainer>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppStateProvider } from './AppStateContext'\n\nReactDOM.render(\n    <AppStateProvider>\n        <App />\n    </AppStateProvider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}