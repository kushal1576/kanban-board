{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","AppStateContext.tsx","useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","CustomDragLayer.tsx","App.tsx","index.tsx"],"names":["AppContainer","styled","div","DragPreviewContainer","props","isPreview","undefined","isHidden","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","overrideItemAtIndex","array","newItem","targetIndex","map","index","moveItem","from","to","insertItemAtIndex","removeItemAtIndex","slice","appData","draggedItem","lists","tasks","appStateReducer","state","action","type","nanoid","payload","targetListIndex","listId","targetList","updatedTargetList","dragIndex","hoverIndex","sourceColumn","targetColumn","sourceListIndex","sourceList","task","updatedSourceList","stateWithUpdatedSourceList","AppStateContext","createContext","AppStateProvider","children","useReducer","dispatch","Provider","useAppState","useContext","useItemDrag","useDrag","begin","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","columnId","useDrop","accept","hover","drop","Column","i","getItemStyles","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","useDragLayer","monitor","isDragging","getItem","getSourceClientOffset","style","App","list","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.533bdff9.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    align-items: flex-start;\n    background-color: #3179ba;\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`\ninterface DragPreviewContainerProps {\n    isHidden?: boolean\n    isPreview?: boolean\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n    transform: ${props => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n    opacity: ${props => (props.isHidden ? 0 : 1)};\n`\nexport const ColumnContainer = styled(DragPreviewContainer)`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`\nexport const ColumnTitle = styled.div`\n    padding: 6px 16px 12px;\n    font-weight: bold;\n`\nexport const CardContainer = styled(DragPreviewContainer)`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`\ninterface AddItemButtonProps {\n    dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n        background-color: #ffffff52;\n    }\n`\nexport const NewItemFormContainer = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`\nexport const NewItemButton = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`\nexport const NewItemInput = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px; \n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`\nexport const CustomDragLayerContainer = styled.div`\n    height: 100%;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 100;\n`","import React, { useState } from \"react\"\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"./styles\"\nimport { useFocus } from \"./utils/useFocus\"\n\ninterface NewItemFormProps {\n    onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n    const [text, setText] = useState(\"\")\n    const inputRef = useFocus()\n    const handleAddText = (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n        if (event.key === \"Enter\") {\n            onAdd(text)\n        }\n    }\n\n    return (\n        <NewItemFormContainer>\n            <NewItemInput\n                ref={inputRef}\n                value={text}\n                onChange={e => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButton onClick={() => onAdd(text)}>\n                Create\n            </NewItemButton>\n        </NewItemFormContainer>\n    )\n}","import { useRef, useEffect } from \"react\"\n\nexport const useFocus = () => {\n    const ref = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        ref.current?.focus()\n    }, [])\n\n    return ref\n}","import React, { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ninterface AddNewItemProps {\n    onAdd(text: string): void\n    toggleButtonText: string\n    dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n    const [showForm, setShowForm] = useState(false)\n    const { onAdd, toggleButtonText, dark } = props\n\n    if (showForm) {\n        return (\n            <NewItemForm\n                onAdd={text => {\n                    onAdd(text)\n                    setShowForm(false)\n                }}\n            />\n        )\n    }\n\n    return (\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n            {toggleButtonText}\n        </AddItemButton>\n    )\n}","interface Item {\n    id: string\n}\n\nexport const findItemIndexById = <T extends Item>(items: T[], id: string) => {\n    return items.findIndex((item: T) => item.id === id)\n}\n\nexport function overrideItemAtIndex<T>(\n    array: T[],\n    newItem: T,\n    targetIndex: number\n) {\n    return array.map((item, index) => {\n        if (index !== targetIndex) {\n            return item\n        }\n\n        return newItem\n    })\n}\n\nexport const moveItem = <T>(array: T[], from: number, to: number) => {\n    const item = array[from]\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to)\n}\n\nexport function removeItemAtIndex<T>(array: T[], index: number) {\n    return [...array.slice(0, index), ...array.slice(index + 1)]\n}\n\nexport function insertItemAtIndex<T>(\n    array: T[],\n    item: T,\n    index: number\n) {\n    return [...array.slice(0, index), item, ...array.slice(index)]\n}","import { nanoid } from \"nanoid\"\nimport React, { createContext, useContext, useReducer } from \"react\"\nimport { DragItem } from \"./DragItem\"\nimport { findItemIndexById, overrideItemAtIndex, moveItem, removeItemAtIndex, insertItemAtIndex } from \"./utils/arrayUtils\"\n\ninterface Task {\n    id: string\n    text: string\n}\n\ninterface List {\n    id: string\n    text: string\n    tasks: Task[]\n}\n\nexport interface AppState {\n    lists: List[]\n    draggedItem: DragItem | undefined\n}\n\nconst appData: AppState = {\n    draggedItem: undefined,\n    lists: [\n        {\n            id: \"0\",\n            text: \"To Do\",\n            tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n        },\n        {\n            id: \"1\",\n            text: \"In Progress\",\n            tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n        },\n        {\n            id: \"2\",\n            text: \"Done\",\n            tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n        }\n    ]\n}\n\ninterface AppStateContextProps {\n    state: AppState\n    dispatch: React.Dispatch<Action>\n}\n\ntype Action =\n    | {\n        type: \"ADD_LIST\"\n        payload: string\n    }\n    | {\n        type: \"ADD_TASK\"\n        payload: { text: string, listId: string }\n    }\n    | {\n        type: \"MOVE_LIST\"\n        payload: {\n            dragIndex: number\n            hoverIndex: number\n        }\n    }\n    | {\n        type: \"MOVE_TASK\"\n        payload: {\n            dragIndex: number\n            hoverIndex: number\n            sourceColumn: string\n            targetColumn: string\n        }\n    }\n    | {\n        type: \"SET_DRAGGED_ITEM\"\n        payload: DragItem | undefined\n    }\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n    switch (action.type) {\n        case \"ADD_LIST\": {\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    { id: nanoid(), text: action.payload, tasks: [] }\n                ]\n            }\n        }\n        case \"ADD_TASK\": {\n            const targetListIndex = findItemIndexById(\n                state.lists,\n                action.payload.listId\n            )\n\n            const targetList = state.lists[targetListIndex]\n\n            const updatedTargetList = {\n                ...targetList,\n                tasks: [\n                    ...targetList.tasks,\n                    { id: nanoid(), text: action.payload.text }\n                ]\n            }\n            return {\n                ...state,\n                lists: overrideItemAtIndex(\n                    state.lists,\n                    updatedTargetList,\n                    targetListIndex\n                )\n            }\n        }\n        case \"MOVE_LIST\": {\n            const { dragIndex, hoverIndex } = action.payload\n            return {\n                ...state,\n                lists: moveItem(state.lists, dragIndex, hoverIndex)\n            }\n        }\n        case \"MOVE_TASK\": {\n            const { dragIndex, hoverIndex, sourceColumn, targetColumn } = action.payload\n            const sourceListIndex = findItemIndexById(state.lists, sourceColumn)\n            const targetListIndex = findItemIndexById(state.lists, targetColumn)\n            const sourceList = state.lists[sourceListIndex]\n            const task = sourceList.tasks[dragIndex]\n\n            const updatedSourceList = {\n                ...sourceList,\n                tasks: removeItemAtIndex(sourceList.tasks, dragIndex)\n            }\n\n            const stateWithUpdatedSourceList = {\n                ...state,\n                lists: overrideItemAtIndex(\n                    state.lists,\n                    updatedSourceList,\n                    sourceListIndex\n                )\n            }\n\n            const targetList = stateWithUpdatedSourceList.lists[targetListIndex]\n\n            const updatedTargetList = {\n                ...targetList,\n                tasks: insertItemAtIndex(targetList.tasks, task, hoverIndex)\n            }\n\n            return {\n                ...stateWithUpdatedSourceList,\n                lists: overrideItemAtIndex(\n                    stateWithUpdatedSourceList.lists,\n                    updatedTargetList,\n                    targetListIndex\n                )\n            }\n\n        }\n        case \"SET_DRAGGED_ITEM\": {\n            return { ...state, draggedItem: action.payload }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n    const [state, dispatch] = useReducer(appStateReducer, appData)\n\n    return (\n        <AppStateContext.Provider value={{ state, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    )\n}\n\nexport const useAppState = () => {\n    return useContext(AppStateContext)\n}","import { useEffect } from \"react\"\nimport { useDrag } from \"react-dnd\"\nimport { getEmptyImage } from \"react-dnd-html5-backend\"\nimport { useAppState } from \"./AppStateContext\"\nimport { DragItem } from \"./DragItem\"\n\nexport const useItemDrag = (item: DragItem) => {\n    const { dispatch } = useAppState()\n    const [, drag, preview] = useDrag({\n        item,\n        begin: () =>\n            dispatch({\n                type: \"SET_DRAGGED_ITEM\",\n                payload: item\n            }),\n        end: () => dispatch({ type: \"SET_DRAGGED_ITEM\", payload: undefined })\n    })\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true })\n    })\n\n    return { drag }\n}","import { DragItem } from \"../DragItem\"\n\nexport const isHidden = (\n    isPreview: boolean | undefined,\n    draggedItem: DragItem | undefined,\n    itemType: string,\n    id: string\n): boolean => {\n    return Boolean(\n        !isPreview &&\n        draggedItem &&\n        draggedItem.type === itemType &&\n        draggedItem.id === id\n    )\n}","import React, { useRef } from \"react\"\nimport { useDrop } from \"react-dnd\"\nimport { useAppState } from \"./AppStateContext\"\nimport { CardDragItem } from \"./DragItem\"\nimport { CardContainer } from \"./styles\"\nimport { useItemDrag } from \"./useItemDrag\"\nimport { isHidden } from \"./utils/isHidden\"\n\ninterface CardProps {\n    text: string\n    index: number\n    id: string\n    columnId: string\n    isPreview?: boolean\n}\n\nexport const Card = ({\n    text,\n    id,\n    index,\n    columnId,\n    isPreview\n}: CardProps) => {\n    const { state, dispatch } = useAppState()\n\n    const ref = useRef<HTMLDivElement>(null)\n    const { drag } = useItemDrag({ type: \"CARD\", id, index, text, columnId })\n\n    const [, drop] = useDrop({\n        accept: \"CARD\",\n        hover(item: CardDragItem) {\n            if (item.id === id) {\n                return\n            }\n\n            const dragIndex = item.index\n            const hoverIndex = index\n            const sourceColumn = item.columnId\n            const targetColumn = columnId\n\n            dispatch({\n                type: \"MOVE_TASK\",\n                payload: { dragIndex, hoverIndex, sourceColumn, targetColumn }\n            })\n            item.index = hoverIndex\n            item.columnId = targetColumn\n        }\n    })\n\n    drag(drop(ref))\n\n    return (\n        <CardContainer\n            isHidden={isHidden(isPreview, state.draggedItem, \"CARD\", id)}\n            isPreview={isPreview}\n            ref={ref}\n        >\n            {text}\n        </CardContainer>\n    )\n}","import React, { useRef } from \"react\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./AppStateContext\"\nimport { Card } from \"./Card\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { useItemDrag } from \"./useItemDrag\"\nimport { useDrop } from \"react-dnd\"\nimport { DragItem } from \"./DragItem\"\nimport { isHidden } from \"./utils/isHidden\"\n\ninterface ColumnProps {\n    text: string\n    index: number\n    id: string\n    isPreview?: boolean\n}\n\nexport const Column = ({ text, index, id, isPreview }: ColumnProps) => {\n    const { state, dispatch } = useAppState()\n    const ref = useRef<HTMLDivElement>(null)\n\n    const { drag } = useItemDrag({ type: \"COLUMN\", id, index, text })\n\n    const [, drop] = useDrop({\n        accept: [\"COLUMN\", \"CARD\"],\n        hover(item: DragItem) {\n            if (item.type === \"COLUMN\") {\n                const dragIndex = item.index\n                const hoverIndex = index\n\n                if (dragIndex === hoverIndex) {\n                    return\n                }\n\n                dispatch({ type: \"MOVE_LIST\", payload: { dragIndex, hoverIndex } })\n\n                item.index = hoverIndex\n            } else {\n                const dragIndex = item.index\n                const hoverIndex = 0\n                const sourceColumn = item.columnId\n                const targetColumn = id\n\n                if (sourceColumn === targetColumn) {\n                    return\n                }\n\n                dispatch({\n                    type: \"MOVE_TASK\",\n                    payload: { dragIndex, hoverIndex, sourceColumn, targetColumn }\n                })\n\n                item.index = hoverIndex\n                item.columnId = targetColumn\n            }\n        }\n    })\n\n    drag(drop(ref))\n\n    return (\n        <ColumnContainer ref={ref} isPreview={isPreview} isHidden={isHidden(isPreview, state.draggedItem, \"COLUMN\", id)}>\n            <ColumnTitle>{text}</ColumnTitle>\n            {state.lists[index].tasks.map((task, i) => (\n                <Card\n                    id={task.id}\n                    columnId={id}\n                    text={task.text}\n                    key={task.id}\n                    index={i}\n                />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another task\"\n                onAdd={text => dispatch({ type: \"ADD_TASK\", payload: { text, listId: id } })}\n                dark\n            />\n        </ColumnContainer>\n    )\n}","import { useDragLayer, XYCoord } from \"react-dnd\"\nimport { Card } from \"./Card\"\nimport { Column } from \"./Column\"\nimport { CustomDragLayerContainer } from \"./styles\"\n\n\nfunction getItemStyles(currentOffset: XYCoord | null): React.CSSProperties {\n    if (!currentOffset) {\n        return {\n            display: \"none\"\n        }\n    }\n\n    const { x, y } = currentOffset\n\n    const transform = `translate(${x}px, ${y}px)`\n    return {\n        transform,\n        WebkitTransform: transform\n    }\n}\n\nconst CustomDragLayer: React.FC = () => {\n    const { isDragging, item, currentOffset } = useDragLayer(monitor => ({\n        isDragging: monitor.isDragging(),\n        item: monitor.getItem(),\n        currentOffset: monitor.getSourceClientOffset()\n    }))\n\n    if (!isDragging) {\n        return null\n    }\n\n    return isDragging ? (\n        <CustomDragLayerContainer>\n            <div style={getItemStyles(currentOffset)}>\n                {item.type === \"COLUMN\" ? (\n                    <Column\n                        id={item.id}\n                        text={item.text}\n                        index={item.index}\n                        isPreview={true}\n                    />\n                ) : (\n                        <Card\n                            id={item.id}\n                            text={item.text}\n                            index={0}\n                            columnId={item.columnId}\n                            isPreview={true}\n                        />\n                    )\n                }\n            </div>\n        </CustomDragLayerContainer>\n    ) : null\n}\n\nexport default CustomDragLayer","import React from 'react'\nimport { AddNewItem } from './AddNewItem'\nimport { useAppState } from './AppStateContext'\nimport { Column } from './Column'\nimport { AppContainer } from './styles'\nimport CustomDragLayer from \"./CustomDragLayer\"\n\nconst App = () => {\n    const { state, dispatch } = useAppState()\n\n    return (\n        <AppContainer>\n            <CustomDragLayer />\n            {state.lists.map((list, i) => (\n                <Column id={list.id} text={list.text} key={list.id} index={i} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={text => dispatch({ type: \"ADD_LIST\", payload: text })}\n            />\n        </AppContainer>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { AppStateProvider } from \"./AppStateContext\"\nimport { DndProvider } from \"react-dnd\"\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\"\n\nReactDOM.render(\n    <DndProvider backend={Backend}>\n        <AppStateProvider>\n            <App />\n        </AppStateProvider>\n    </DndProvider>,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}